#!/usr/bin/env python

"""
Use cases

codev init --template=[template]
    -- create new project

codev install --environment=[environment] --infrastructure=[infrastructure] --perfomer=test.coex.cz  --isolation=[lxc]
    -- install project
    environment default = default

    -- idempotent

codev stop [environment]
    -- stop project

codev restart [environment]
    -- stop project and run project

codev run [environment]
    -- run installed project

codev upgrade [environment]
    -- install project and run/restart

codev status [environment]
    -- show info about project status on evironment (running / stopped ...)

codev exec --environment=[environment] --infrastructure=[infrastructure] [command]


codev configuration --environment=[environment] --infrastructure=[infrastructure]
"""

import click
from codev import install_project
from codev.configuration import YAMLConfiguration
from os import path


@click.group()
def main():
    pass


@main.command()
@click.option('-f', '--filepath', default='.codev', help='Path to configuration file.')
def init(filepath):
    """
    Create .codev file in current directory or in given file path.
    """

    if path.exists(filepath):
        if not click.confirm('A file "%(filepath)s" already exists. Overwrite?' % {'filepath': filepath}):
            return

    configuration = YAMLConfiguration()
    try:
        configuration.save_to_file(filepath)
    except Exception as e:
        raise click.ClickException(e)


def configuration_option(f):
    def callback(ctx, param, value):
        configuration = YAMLConfiguration.from_file(value)
        return configuration
    return click.option('-c', '--configuration',
                        is_eager=True,
                        default='.codev',
                        help='Path to configuration file.',
                        callback=callback)(f)


def environment_option(f):
    return click.option('-e', '--environment',
                        default=None,
                        help='Environment to install on')(f)


def infrastructure_option(f):
    return click.option('-i', '--infrastructure',
                        default=None,
                        help='Infrastructure to install with')(f)


def version_option(f):
    return click.option('-v', '--version',
                        default=None,
                        help='Mode')(f)


def mode_option(f):
    return click.option('-m', '--mode',
                        default='control',
                        help='Mode')(f)


def cei_options(f):
    f = infrastructure_option(f)
    f = environment_option(f)
    f = configuration_option(f)
    f = version_option(f)
    f = mode_option(f)
    return f


@main.command()
@cei_options
def install(configuration, environment, infrastructure, version, mode):
    """
    install project on environment with
        infrastructure
    """
    print(configuration.environments[environment].infrastructures)
    install_project(configuration, environment, infrastructure)

    # if click.confirm(
    #     'Install project "%(project)s" on environment "%(environment)s" with infrastructure "%(infrastructure)s"' % {
    #         'project': configuration.project,
    #         'environment': environment,
    #         'infrastructure': infrastructure
    #     }
    # ):



if __name__ == "__main__":
    main()
