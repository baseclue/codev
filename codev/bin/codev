#!/usr/bin/env python

"""
Use cases

codev init --template=[template]
    -- create new project

codev install [environment] [infrastructure] [version]
    -- install project

codev start [environment] [infrastructure] [version]
    -- start installed project

codev stop [environment] [infrastructure] [version]
    -- stop installed project

codev run [script] [environment] [infrastructure] [version]
"""

import click

from codev.configuration import YAMLConfiguration
from codev.executors import Control, Perform
from codev.deployment import Deployment

from os import path
from functools import wraps


@click.group()
def main():
    pass


@main.command()
@click.option('-f', '--filepath', default='.codev', help='Path to configuration file.')
def init(filepath):
    """
    Create .codev file in current directory or in given file path.
    """

    if path.exists(filepath):
        if not click.confirm('A file "%(filepath)s" already exists. Overwrite?' % {'filepath': filepath}):
            return

    configuration = YAMLConfiguration()
    try:
        configuration.save_to_file(filepath)
    except Exception as e:
        raise click.ClickException(e)


def configuration_option(f):
    def callback(ctx, param, value):
        configuration = YAMLConfiguration.from_file(value)
        return configuration

    return click.option('-c', '--configuration',
                        default='.codev',
                        help='Path to configuration file.',
                        callback=callback)(f)


def environment_option(f):
    return click.argument('environment')(f)
    # return click.option('-e', '--environment',
    #                     help='Environment to install on')(f)


def infrastructure_option(f):
    return click.argument('infrastructure')(f)
    # return click.option('-i', '--infrastructure',
    #                     help='Infrastructure to install with')(f)


def version_option(f):
    return click.argument('version')(f)
    # return click.option('-v', '--version',
    #                     help='Mode')(f)


def mode_option(f):
    return click.option('-m', '--mode',
                        type=click.Choice(['control', 'perform']),
                        default='control',
                        help='Mode')(f)


def recognize_deployment(f):
    def decorator(func):
        @wraps(func)
        def deployement_wrapper(configuration, environment, infrastructure, version, **kwargs):
            deployment = Deployment(configuration, environment, infrastructure, version)
            return func(configuration=configuration, deployment=deployment, **kwargs)
        return deployement_wrapper

    f = version_option(f)
    f = infrastructure_option(f)
    f = environment_option(f)
    return decorator(f)


def main_options(f):
    f = mode_option(f)
    f = configuration_option(f)
    return f


def confirmation(message):
    def decorator(f):
        @wraps(f)
        def confirmation_wrapper(force, **kwargs):
            if not force:
                if not click.confirm(message.format(**kwargs)):
                    raise click.Abort()
            return f(**kwargs)
        return confirmation_wrapper
    return decorator


def executor(f):
    @wraps(f)
    def executor_wrapper(configuration, deployment, mode, **kwargs):
        executor_class = None
        if mode == 'control':
            executor_class = Control

        elif mode == 'perform':
            executor_class = Perform

        executor = executor_class(configuration, deployment)
        return f(executor=executor, **kwargs)

    return executor_wrapper


@main.command()
@main_options
@recognize_deployment
@click.option('-f', '--force', is_flag=True,  help='Force')
@confirmation('Install project "{configuration.project}" on environment "{deployment.environment}" with infrastructure "{deployment.infrastructure}" at version "{deployment.version}"')
@executor
def install(executor):
    """
    install project on environment infrastructure version
    """
    executor.install()


@main.command()
@main_options
@recognize_deployment
@confirmation('Execute script "%(script)s" at project "%(project)s" on environment "%(environment)s" with infrastructure "%(infrastructure)s" at version "%(version)s"')
@executor
@click.argument('script')
def run(executor, script):
    executor.run(script)

if __name__ == "__main__":
    main()

